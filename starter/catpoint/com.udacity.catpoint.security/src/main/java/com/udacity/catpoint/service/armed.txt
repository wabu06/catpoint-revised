ARMED_HOME
	setAlarmStatus(AlarmStatus.ALARM);
            
    	Object[] sensors = getSensors().stream().filter( s -> s.getActive() ).toArray();
            
        if( sensors.length > 0 )
        {
            	randSensor = (Sensor) sensors[ RNG.nextInt(sensors.length) ];
            	sensorTypeName = randSensor.getSensorType().toString();
        }
    	
    	// this is done to satisfy effectively final requirement for lamdas
   String finalSensorTypeName = sensorTypeName;
   statusListeners.forEach( sl -> sl.catDetected(cat, finalSensorTypeName) );

ARMED_AWAY
	Object[] sensors = getSensors().stream().filter( s -> s.getActive() ).toArray();
            
        if( sensors.length > 0 )
        {
            	setAlarmStatus(AlarmStatus.ALARM);
            	randSensor = (Sensor) sensors[ RNG.nextInt(sensors.length) ];
            	sensorTypeName = randSensor.getSensorType().toString();
        }
        else
        	setAlarmStatus(AlarmStatus.PENDING_ALARM);
    
    		// this is done to satisfy effectively final requirement for lamdas
        String finalSensorTypeName = sensorTypeName;
        statusListeners.forEach( sl -> sl.catDetected(cat, finalSensorTypeName) );

DISARMED
	Object[] sensors = getSensors().stream().filter( s -> s.getActive() ).toArray();
	
	randSensor = (Sensor) sensors[ RNG.nextInt(sensors.length) ];
    sensorTypeName = randSensor.getSensorType().toString();
    
    	// this is done to satisfy effectively final requirement for lamdas
    String finalSensorTypeName = sensorTypeName;
    statusListeners.forEach( sl -> sl.catDetected(cat, finalSensorTypeName) );
    
    
private void catDetected(Boolean cat)
	{
        Sensor randSensor;
        String sensorTypeName = "";
        
        if( cat && getArmingStatus() == ArmingStatus.ARMED_HOME )
        {
            setAlarmStatus(AlarmStatus.ALARM);
            
            Object[] sensors = getSensors().stream().filter( s -> s.getActive() ).toArray();
            
            if( sensors.length > 0 )
            {
            	randSensor = (Sensor) sensors[ RNG.nextInt(sensors.length) ];
            	sensorTypeName = randSensor.getSensorType().toString();
            }
        }
        else
		{
         	boolean active = getSensors().stream().anyMatch( s -> s.getActive().booleanValue()  );
            
            if( !active )
            	setAlarmStatus(AlarmStatus.NO_ALARM);
		}

			// this is done to satisfy effectively final requirement for lamdas
        String finalSensorTypeName = sensorTypeName;
        statusListeners.forEach( sl -> sl.catDetected(cat, finalSensorTypeName) );
    }
